I"ø'<p>For about a year, I‚Äôve been watching Rust from the sidelines with extreme curiousity - eager to find the time to get my hands dirty and learn the language. Now that ‚Äì thanks to a global pandemic ‚Äì I‚Äôm armed with way more free time then I know what to do with, I‚Äôll be making a devlog on my experience learning and making a game in Rust.</p>

<!--more-->

<h1 id="foreword">Foreword</h1>

<p>Today is June 4th, 2020. Last Monday, George Floyd, a Black African-American man, was murdered in broad daylight by the police. His murderer was not arrested until four days later. Over the course of the last week, Americans came out in hoards to protest against this obvious act of systemic racism and police brutality towards African-Americans. In response to these protests, we witnessed police across the country retaliate with unprovocated acts of police brutality and violence. There is zero grounds for this to ever be acceptable and is fundementally unconstitutional. We must fight back against these acts of hatred and continue to further the fight against systemic racism, and police brutality.</p>

<p>Black Lives Matter. Period.</p>

<p>I have already donated to a number of bail funds across America and I encourage you to do the same, to educate your peers, and speak out against these injustices.</p>

<p>Here are a few charities to donate to:</p>

<p><a href="https://secure.actblue.com/donate/ms_blm_homepage_2019">Black Lives Matter</a></p>

<p><a href="https://www.gofundme.com/f/georgefloyd">George Floyd Memorial Fund</a></p>

<p><a href="https://www.joincampaignzero.org/">Campaign Zero</a></p>

<h1 id="background">Background</h1>

<p>To provide some context on my own background, I‚Äôm entering my fifth year at DigiPen Institute of Technology where I‚Äôm majoring in Computer Science with a focus on digital signal processing and audio programming. During the course of my college career at DigiPen, I‚Äôve had the opportunity to work on all sorts of projects, ranging from creating a completely custom game engine to a granular synthesizer. I primarily work in C++ but have some experience with C and C#, and have been wanting to add Rust to the list of languages I know.</p>

<p>With that in mind - I decided I was going to dive in head first and learn Rust by creating <em>Boundless</em>, a 2D Survival Sandbox Game heavily inspiried by one of my all time favorites - Terraria, and thus this devlog was born! I plan on trying to write posts at least every other week, documenting the systems I implemented, what I‚Äôm enjoying and not enjoying about Rust, as well as just my over all experience with using the language for game development. Before we begin, I wanted to note that in an attempt to save your eyes from the horror that is my programmer art, my close friend and outstanding artist, Kyle Erickson, will be providing me with most of the assets that will be used for the game. If you want to see more of his awesome work, please give him a follow on his (Slightly NSFW) Instagram at <a href="https://www.instagram.com/sunrise.samurai/">@samurai.sunrise</a>.</p>

<h1 id="source-code-and-git-workflow">Source Code and Git Workflow</h1>

<p>All the code being used for the project can be found on Boundless‚Äôs GitHub repository <a href="https://github.com/abrigante1/boundless">here</a>. Real quick, to explain the repository‚Äôs layout - I like to organize my work into three core branches:</p>

<ul>
  <li>Master</li>
  <li>Production</li>
  <li>Sandbox</li>
</ul>

<p>Master is used for a ‚Äúcompleted‚Äù version of the project. This will contain no work-in-progress features, and is intended to host the most recent version of the project that can be downloaded, compiled, and run with zero issues. Production, will be where I am actively working on polishing and re-architecting a features that have already been prototyped. This branch will include partially implemented features, but will be as close to complete as possible. Lastly, sandbox is where I will be doing all my testing work and experiementation. It‚Äôs here where I will be trying out a potential implementation, and discovering what does and doesn‚Äôt work. This branch will essentially always be unstable and it‚Äôs explicit purpose is to act as a playground where I can try out new ideas, without risking the pollution of production. However, after this branch will usually be updated to include the most up-to-date version of production at a given moment. I heavily enjoy this workflow as it allows me to gain a better understanding of how a system needs to work with other systems <em>before</em> I try to architect the feature. As a result, I am able to see the bigger picture much more clearly.</p>

<p>So with that our of the way‚Ä¶</p>

<h1 id="the-tech-stack">The Tech Stack</h1>

<p>For this project, I was pretty conflicted with how much raw custom engine work I wanted to do. While I heavily enjoy core engine development, I really wanted to get right into making a game so I initially decided to create this project using the Amethyst game engine framework. <a href="https://amethyst.rs/">Amethyst</a> is a huge Rust game engine framework that provides you with a lot of the tools needed to get starting making a game. It can take care of audio, graphics, entity management via an entity-component system, and many other things.</p>

<p>However, if you have already taken a look Boundless‚Äôs GitHub repository, you may have noticed that it says ‚Äú‚Ä¶making a 2D Sandbox Game with the GGEZ framework‚Äù and <em>not</em> the Amethyst framework. Why‚Äôs that? Well - while Amethyst does offer a lot of very powerful tools, it also isn‚Äôt very well documented and felt extremely constraining. With every system I wanted to implement, it felt like I was fighting against Amethyst to get it to do what I wanted it to do, and I spent more time trying to figure out how Amyethest was support to work then I was spending time actually doing game development. As a result of this, I ended up framework-hopping a few times between Amethyst and the aforementioned GGEZ.</p>

<p><a href="https://ggez.rs/">GGEZ</a> is another game engine framework, but has a completely different design philosophy. Rather then being an all-in-one toolbox providing everything you need to make a game, GGEZ gives you the basics and then lets you decide how to build on top of it. While this directly clashed with my initial desire to avoid doing too much core engine work, I eventually got tired of fighting Amethyst and decided that it was better to spend more time working on core engine features, then it was to dig through Amethyst‚Äôs source code trying to figure out how it wanted me to do a thing. As a result, I feel that for this project GGEZ is the better route to go.</p>

<p>I also really wanted to learn how a proper Entity-Component System (ECS), so on top of GGEZ, I also decided to use <a href="https://specs.amethyst.rs/">specs</a> as the ECS for the game. For those that are unfamiliar with what an ECS is, specs has a great briefer that can be found <a href="https://specs.amethyst.rs/docs/tutorials/01_intro.html">here</a>. An additional secret hidden motive for using an ECS in this project, was also to get comfortable with what‚Äôs currently the standard, so that I could hopefully one day try writing my own. So who knows ‚Äì maybe after this series I‚Äôll make one about writing a custom ECS :)</p>

<h1 id="getting-up-to-speed">Getting up to Speed</h1>

<p>Since this initial post is already getting quite long, I‚Äôll briefly wrap up showing off what I currently have implemented in my sandbox, the source code of which can be seen <a href="https://github.com/abrigante1/boundless/tree/v0.1">here</a>, as well as some quick notes on where I‚Äôll be going next.</p>

<p><img src="/assets/boundless/gifs/sandbox_v0.1_bp-1.gif" alt="Image" />
Note: The background sprite for game in this gif is by MadFireOn and can be found <a href="https://swapnilrane24.itch.io/nature-background?download">here</a></p>

<p>The above gif shows off the following features:</p>

<ul>
  <li>Rendering System
    <ul>
      <li>Sprite Sheets
        <ul>
          <li>Sprite Culling</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>God Camera Controls
    <ul>
      <li>Zoom</li>
      <li>Pan</li>
    </ul>
  </li>
  <li>World Generation
    <ul>
      <li>Basic Perlin-Noise Height Map</li>
    </ul>
  </li>
  <li>Tile Interaction
    <ul>
      <li>Tiles stored in a TileMap</li>
      <li>Can click on a tile to see it‚Äôs data, or delete it.</li>
    </ul>
  </li>
</ul>

<h1 id="first-impressions">First Impressions</h1>

<p>In the next blog post, I‚Äôll be moving to more of a technical deep dive on each of the above systems, but rather then discussing the implementation currently seen in sandbox - I‚Äôll be detailing my process of taking the prototype and converting it into a proper feature implementation. I‚Äôm quite excited to being this process, as now that I‚Äôve begun to get more comfortable with Rust, I can really sit down and architect implementations that use the language to its advantage. On that note, my first impressions of Rust have been extremely positive. Coming from C++, there were a few things that took a bit of getting my head wrapped around, but after spending the last few weeks with it nearly all of those complaints have gone away. With so many powerful features built write into the language, such as tuples and destructing, on top of an extremely expressive syntax - I couldn‚Äôt help but fall in love with writing Rust code. That being said, while I wouldn‚Äôt say I‚Äôve had to ‚Äúfight the borrow checker‚Äù yet, I still don‚Äôt completely understand why or how it wants me to do certain things ‚Äì though I expect that to go away as I gain more experience. The only ‚Äúreal‚Äù flaw I‚Äôve found with the language thus far, is that the compiler feels a bit slower compared to what I‚Äôm used too, and thats on top of C++‚Äôs already slower compile times.</p>

<p>All-in-all, it‚Äôs been an absolute blast to work in this language and can‚Äôt wait to learn more about it‚Äôs feature set. See you in the next post!</p>
:ET